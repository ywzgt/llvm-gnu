name: multilib uclibc
on:
  workflow_dispatch:
jobs:
  uclibc:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Preparing LFS rootfs and Setting Up the Environment
      run: |
        wget -q https://api.github.com/repos/ywzgt/alfs-uclibc/releases
        URL="$(grep -o 'https://.*.r32/rootfs.tar.xz' releases | sort -uV | tail -1)"
        wget -nv -c $URL{,.sha256}; rm releases
        sha256sum -c rootfs.tar.xz.sha256
        sudo mkdir -p rootfs{,32}
        echo " -> Extracting the 32bit 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs32
        TARGET="$(sudo chroot rootfs32 gcc -dumpmachine)"
        sudo mv rootfs{32,/$TARGET}; rm -f rootfs.*xz*
        ln -s rootfs/$TARGET target
        wget -nv https://github.com/ywzgt/alfs-uclibc/releases/latest/download/rootfs.tar.xz{,.sha256}
        sha256sum -c rootfs.tar.xz.sha256; echo " -> Extracting the 64bit 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs
        for LFS in rootfs{,/$TARGET}; do
            echo " -> Preparing Virtual Kernel File Systems..."
            sudo mkdir -pv $LFS/{dev,proc,sys,run,tmp}
            sudo mount -v --bind /dev $LFS/dev
            sudo mount -v --bind /dev/pts $LFS/dev/pts
            sudo mount -vt proc proc $LFS/proc
            sudo mount -vt sysfs sysfs $LFS/sys
            sudo mount -vt tmpfs tmpfs $LFS/run
            sudo mount -vt tmpfs tmpfs $LFS/tmp
            if [ -h $LFS/dev/shm ]; then sudo mkdir -pv $LFS/$(readlink $LFS/dev/shm); else sudo mount -vt tmpfs -o nosuid,nodev devshm $LFS/dev/shm; fi
            echo ''; sudo bash -c "echo 'nameserver 1.1.1.1' >$LFS/etc/resolv.conf"
            sudo install -do $(id -u) -g $(id -g) $LFS/build
            cp *.sh patch/*.patch $LFS/build
            cp -r mul.uclibc $LFS/build
        done

    - name: LIBC m32
      run: sudo chroot target /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build/mul.uclibc; bash -e libc.sh"
    - name: Copy
      run: sudo mkdir rootfs/usr/lib32; sudo ln -srv rootfs/{usr/lib32,}; sudo cp -va target/build/p/{,usr/}lib32/* rootfs/lib32; sudo ln -srv rootfs/lib{32/ld-uClibc.so.1,}; sudo ln -sfrv rootfs/lib/{uclibc,libssp}_nonshared.a
    - name: Build
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build/mul.uclibc; bash -e gcc.sh"
   - name: pre llvm
     run: |
       wget -nv https://github.com/ywzgt/llvm-toolchain/releases/download/17.0.6-20240319/llvm-uclibc-17.0.6.tar.xz
       sudo tar xvf llvm-uclibc-17.0.6.tar.xz -C rootfs
    - name: Build llvm multilib
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build/mul.uclibc; bash -e cl-mul.sh"
    - name: Build pam for i386
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build/mul.uclibc; bash -e pam.sh"

    - name: Gh login
      if: ${{ failure() }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token; gh auth setup-git; gh auth status
    - name: Setup tmate ssh session
      if: ${{ always() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
